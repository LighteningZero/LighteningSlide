function isDigit(x) {if (typeof(x) !== 'string') {return false;} if ('0'.charCodeAt() <= x.charCodeAt() && x.charCodeAt() <= '9'.charCodeAt()) {return true;}return false;};function isBlankChar(x) {if (typeof(x) !== 'string') {return false;}if (x == ' ' || x == '\t' || x == '\n' || x == '\r') {return true;}return false;};function Scanner(text) {this.text = text;this.pointer = 0;this.mark = undefined;this.resetScanner = () => {this.pointer = 0;this.mark = undefined;};this.setLineBreakToLFMode = () => {this.text = this.text.replaceAll('\r\n', '\n');this.text = this.text.replaceAll('\r', '\n');};this.skipSpace = () => {let result = false;while (this.text[this.pointer] == ' ') {this.pointer += 1;result = true;}return result;};this.skipTab = () => {let result = false;while (this.text[this.pointer] == '\t') {this.pointer += 1;result = true;}return result;};this.skipReturn = () => {let result = false;while (this.text[this.pointer] == '\r' || this.text[this.pointer] == '\n') {this.pointer += 1;result = true;}return result;};this.skipOneReturn = () => {let result = false;if (this.text[this.pointer] == '\r' || this.text[this.pointer] == '\n') {this.pointer += 1;result = true;}return result;};this.skipEmpty = () => {let result = false;while (this.skipSpace() || this.skipTab()) {result = true;}return result;};this.skipBlank = () => {let result = false;while (this.skipEmpty() || this.skipReturn()) {result = true;}return result;};this.skipChar = (length=1) => {this.pointer += length;};this.getChar = () => {return this.text[this.pointer];};this.scanChar = () => {this.pointer += 1;return this.text[this.pointer - 1];};this.isEnd = () => {if (this.text[this.pointer] === undefined) {return true;}return false;};this.scanNumber = () => {let result = new Number(0);this.skipEmpty();while (isDigit(this.getChar())) {result *= 10;result += Number(this.scanChar());if (this.isEnd()) {break;}}return result;};this.scanToken = () => {let result = new String();this.skipEmpty();while (!isBlankChar(this.getChar()) && this.getChar() != undefined) {result += this.scanChar();if (this.isEnd()) {break;}}return result;};this.scanLine = () => {let result = new String();this.skipEmpty();while (this.getChar() !== '\n' && this.getChar() !== '\r' && this.getChar() != undefined) {result += this.scanChar();if (this.isEnd()) {break;}}return result;};this.makeMark = point => {this.mark = point;};this.makeMarkHere = () => {this.mark = this.pointer;};this.clearMark = () => {this.mark = undefined;};this.getTextFormMark = () => {if (this.mark === undefined) {return undefined;}return this.text.substr(this.mark, this.pointer - this.mark + 1);};return this;};